{
  "version": 3,
  "sources": ["../../../contentlayer.config.ts", "../../../utils/blog/sluggify-title.ts"],
  "sourcesContent": ["import {defineDocumentType, defineNestedType, makeSource} from 'contentlayer/source-files'\nimport {format} from 'date-fns' //@ts-ignore\nimport {de} from 'date-fns/locale/index.js'\nimport type * as unified from 'unified'\nimport {toMarkdown} from 'mdast-util-to-markdown'\nimport {mdxToMarkdown} from 'mdast-util-mdx'\nimport {bundleMDX} from 'mdx-bundler'\nimport {sluggifyTitle} from './utils/blog/sluggify-title'\n\nconst Author = defineNestedType(() => ({\n  name: 'Author',\n  fields: {\n    name: {type: 'string', required: true},\n    description: {type: 'string', required: true},\n    avatar: {type: 'string', required: true},\n    linkedin: {type: 'string', required: false},\n    instagram: {type: 'string', required: false},\n    twitter: {type: 'string', required: false}\n  }\n}))\n\nconst computedFields = {\n  slug: {\n    type: 'string',\n    resolve: (post: any) => post._raw.flattenedPath\n  },\n  writtenDate: {\n    type: 'string',\n    resolve: (post: any) => format(new Date(post.date), 'dd. MMMM yyyy', {locale: de})\n  },\n  headings: {\n    type: 'json',\n    resolve: async (post: any) => {\n      const headings: PostHeading[] = []\n\n      await bundleMDX({\n        source: post.body.raw,\n        mdxOptions: (opts) => {\n          opts.remarkPlugins = [...(opts.remarkPlugins ?? []), tocPlugin(headings)]\n          return opts\n        }\n      })\n\n      return headings\n    }\n  }\n}\n\nexport const BlogPost = defineDocumentType(() => ({\n  name: 'BlogPost',\n  filePathPattern: `**/*.mdx`,\n  contentType: 'mdx',\n  fields: {\n    title: {\n      type: 'string',\n      description: 'The title of the post',\n      required: true\n    },\n    date: {\n      type: 'date',\n      description: 'The date of the post',\n      required: true\n    },\n    excerpt: {\n      type: 'string',\n      description: 'Short intro to the post',\n      required: true\n    },\n    author: {\n      type: 'nested',\n      of: Author,\n      description: 'The author of the post',\n      required: true\n    }\n  }, //@ts-ignore\n  computedFields\n}))\n\nconst tocPlugin =\n  (toc: PostHeading[]): unified.Plugin =>\n  () => {\n    return (node: any) => {\n      for (const element of node.children.filter((_: any) => _.type === 'heading' || _.name === 'OptionsTable' || _.name === 'Heading')) {\n        if (element.type === 'heading') {\n          const heading = toMarkdown({type: 'paragraph', children: element.children}, {extensions: [mdxToMarkdown()]})\n            .trim()\n            .replace(/<.*$/g, '')\n            .replace(/\\\\/g, '')\n            .trim()\n          toc.push({level: element.depth, heading, slug: sluggifyTitle(heading)})\n        }\n      }\n    }\n  }\n\nexport default makeSource({\n  contentDirPath: 'content/blog',\n  documentTypes: [BlogPost]\n})\n", "export const getNodeText = (node: React.ReactNode): string => {\n  if (typeof node === 'string') return node\n  if (typeof node === 'number') return node.toString()\n  if (node instanceof Array) return node.map(getNodeText).join('')\n  if (typeof node === 'object' && (node as any)?.props?.children) return getNodeText((node as any).props.children)\n  return ''\n}\n\nexport const sluggifyTitle = (node: React.ReactNode): string => {\n  const re = /[^\\w\\s]/g\n  const title = getNodeText(node)\n  return title.trim().toLowerCase().replace(re, '').replace(/\\s+/g, '-')\n}\n"],
  "mappings": "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",
  "names": []
}
