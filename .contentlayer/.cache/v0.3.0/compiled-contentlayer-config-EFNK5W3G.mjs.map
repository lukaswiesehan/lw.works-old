{
  "version": 3,
  "sources": ["../../../contentlayer.config.js"],
  "sourcesContent": ["import {defineDocumentType, defineNestedType, makeSource} from 'contentlayer/source-files'\nimport {format} from 'date-fns'\nimport {de} from 'date-fns/locale/index.js'\n\nconst Author = defineNestedType(() => ({\n  name: 'Author',\n  fields: {\n    name: {type: 'string', required: true},\n    description: {type: 'string', required: true},\n    avatar: {type: 'string', required: true},\n    linkedin: {type: 'string', required: false},\n    instagram: {type: 'string', required: false},\n    twitter: {type: 'string', required: false}\n  }\n}))\n\nconst computedFields = {\n  slug: {\n    type: 'string',\n    resolve: (post) => post._raw.flattenedPath\n  },\n  writtenDate: {\n    type: 'string',\n    resolve: (post) => format(new Date(post.date), 'dd. MMMM yyyy', {locale: de})\n  },\n  headings: {\n    type: 'json',\n    resolve: async (post) => {\n      const headings = []\n\n      await bundleMDX({\n        source: post.body.raw,\n        mdxOptions: (opts) => {\n          opts.remarkPlugins = [...(opts.remarkPlugins ?? []), tocPlugin(headings)]\n          return opts\n        }\n      })\n\n      return [{level: 1, title: post.title}, ...headings]\n    }\n  }\n}\n\nexport const BlogPost = defineDocumentType(() => ({\n  name: 'BlogPost',\n  filePathPattern: `**/*.mdx`,\n  contentType: 'mdx',\n  fields: {\n    title: {\n      type: 'string',\n      description: 'The title of the post',\n      required: true\n    },\n    date: {\n      type: 'date',\n      description: 'The date of the post',\n      required: true\n    },\n    excerpt: {\n      type: 'string',\n      description: 'Short intro to the post',\n      required: true\n    },\n    author: {\n      type: 'nested',\n      of: Author,\n      description: 'The author of the post',\n      required: true\n    }\n  },\n  computedFields\n}))\n\nexport default makeSource({\n  contentDirPath: 'content/blog',\n  documentTypes: [BlogPost]\n})\n"],
  "mappings": ";AAAA,SAAQ,oBAAoB,kBAAkB,kBAAiB;AAC/D,SAAQ,cAAa;AACrB,SAAQ,UAAS;AAEjB,IAAM,SAAS,iBAAiB,OAAO;AAAA,EACrC,MAAM;AAAA,EACN,QAAQ;AAAA,IACN,MAAM,EAAC,MAAM,UAAU,UAAU,KAAI;AAAA,IACrC,aAAa,EAAC,MAAM,UAAU,UAAU,KAAI;AAAA,IAC5C,QAAQ,EAAC,MAAM,UAAU,UAAU,KAAI;AAAA,IACvC,UAAU,EAAC,MAAM,UAAU,UAAU,MAAK;AAAA,IAC1C,WAAW,EAAC,MAAM,UAAU,UAAU,MAAK;AAAA,IAC3C,SAAS,EAAC,MAAM,UAAU,UAAU,MAAK;AAAA,EAC3C;AACF,EAAE;AAEF,IAAM,iBAAiB;AAAA,EACrB,MAAM;AAAA,IACJ,MAAM;AAAA,IACN,SAAS,CAAC,SAAS,KAAK,KAAK;AAAA,EAC/B;AAAA,EACA,aAAa;AAAA,IACX,MAAM;AAAA,IACN,SAAS,CAAC,SAAS,OAAO,IAAI,KAAK,KAAK,IAAI,GAAG,iBAAiB,EAAC,QAAQ,GAAE,CAAC;AAAA,EAC9E;AAAA,EACA,UAAU;AAAA,IACR,MAAM;AAAA,IACN,SAAS,OAAO,SAAS;AACvB,YAAM,WAAW,CAAC;AAElB,YAAM,UAAU;AAAA,QACd,QAAQ,KAAK,KAAK;AAAA,QAClB,YAAY,CAAC,SAAS;AACpB,eAAK,gBAAgB,CAAC,GAAI,KAAK,iBAAiB,CAAC,GAAI,UAAU,QAAQ,CAAC;AACxE,iBAAO;AAAA,QACT;AAAA,MACF,CAAC;AAED,aAAO,CAAC,EAAC,OAAO,GAAG,OAAO,KAAK,MAAK,GAAG,GAAG,QAAQ;AAAA,IACpD;AAAA,EACF;AACF;AAEO,IAAM,WAAW,mBAAmB,OAAO;AAAA,EAChD,MAAM;AAAA,EACN,iBAAiB;AAAA,EACjB,aAAa;AAAA,EACb,QAAQ;AAAA,IACN,OAAO;AAAA,MACL,MAAM;AAAA,MACN,aAAa;AAAA,MACb,UAAU;AAAA,IACZ;AAAA,IACA,MAAM;AAAA,MACJ,MAAM;AAAA,MACN,aAAa;AAAA,MACb,UAAU;AAAA,IACZ;AAAA,IACA,SAAS;AAAA,MACP,MAAM;AAAA,MACN,aAAa;AAAA,MACb,UAAU;AAAA,IACZ;AAAA,IACA,QAAQ;AAAA,MACN,MAAM;AAAA,MACN,IAAI;AAAA,MACJ,aAAa;AAAA,MACb,UAAU;AAAA,IACZ;AAAA,EACF;AAAA,EACA;AACF,EAAE;AAEF,IAAO,8BAAQ,WAAW;AAAA,EACxB,gBAAgB;AAAA,EAChB,eAAe,CAAC,QAAQ;AAC1B,CAAC;",
  "names": []
}
